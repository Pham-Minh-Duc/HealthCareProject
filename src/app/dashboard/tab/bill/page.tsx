
import React, { useState } from 'react';

const appointmentData = [
  { time: "08:00", doctor: "Dr. H·∫£i", email: "nguyenvana@example.com", fullName: "Nguy·ªÖn VƒÉn A", status: "ƒêang ch·ªù", note: "Kh√°m m·∫Øt" },
  { time: "08:30", doctor: "Dr. T√∫", email: "tranthib@example.com", fullName: "Tr·∫ßn Th·ªã B", status: "ƒê√£ kh√°m", note: "T∆∞ v·∫•n n·ªôi khoa" },
  { time: "09:00", doctor: "Dr. Lan", email: "phamvanc@example.com", fullName: "Ph·∫°m VƒÉn C", status: "ƒêang ch·ªù", note: "X√©t nghi·ªám m√°u" },
  { time: "09:30", doctor: "Dr. Ph√∫c", email: "lethid@example.com", fullName: "L√™ Th·ªã D", status: "H·ªßy", note: "Kh√¥ng c√≥ m·∫∑t" },
  { time: "10:00", doctor: "Dr. An", email: "hoangmine@example.com", fullName: "Ho√†ng Minh E", status: "ƒê√£ kh√°m", note: "Kh√°m n·ªôi ti·∫øt" },
  { time: "10:30", doctor: "Dr. My", email: "vothif@example.com", fullName: "V√µ Th·ªã F", status: "ƒêang ch·ªù", note: "Tai-M≈©i-H·ªçng" },
  { time: "11:00", doctor: "Dr. To√†n", email: "dangvang@example.com", fullName: "ƒê·∫∑ng VƒÉn G", status: "ƒê√£ kh√°m", note: "T∆∞ v·∫•n t√¢m l√Ω" },
  { time: "13:00", doctor: "Dr. H√πng", email: "ngothih@example.com", fullName: "Ng√¥ Th·ªã H", status: "H·ªßy", note: "H·ªßy do tr·ªÖ gi·ªù" },
  { time: "13:30", doctor: "Dr. Minh", email: "buianhi@example.com", fullName: "B√πi Anh I", status: "ƒêang ch·ªù", note: "Kh√°m da li·ªÖu" },
  { time: "14:00", doctor: "Dr. H·∫±ng", email: "dothij@example.com", fullName: "ƒê·ªó Th·ªã J", status: "ƒê√£ kh√°m", note: "Kh√°m m·∫Øt ƒë·ªãnh k·ª≥" },
  { time: "14:30", doctor: "Dr. Qu√¢n", email: "phanvank@example.com", fullName: "Phan VƒÉn K", status: "ƒêang ch·ªù", note: "Kh√°m t·ªïng qu√°t" },
  { time: "15:00", doctor: "Dr. Nh√£", email: "dinhthil@example.com", fullName: "ƒêinh Th·ªã L", status: "ƒê√£ kh√°m", note: "Ph·ª• khoa" },
  { time: "15:30", doctor: "Dr. Khoa", email: "nguyenanhm@example.com", fullName: "Nguy·ªÖn Anh M", status: "H·ªßy", note: "B·ªánh nh√¢n hu·ª∑ l·ªãch" }
];

const BillPage = () => {

  // t√¨m ki·∫øm theo tr·∫°ng th√°i
  const [status, setStatus] = useState("");
  const [filteredData, setFilteredData] = useState(appointmentData);

  const handleStatusChange = () => {
    const result = appointmentData.filter(item =>
      status ? item.status === status : true
    );
    setFilteredData(result);
  };
  // h·∫øt t√¨m ki·∫øm theo tr·∫°ng th√°i

  // th√™m l·ªãch h·∫πn
  const appointmentSeedData = [{
    time: '',
    doctor: '',
    email: '',
    fullName: '',
    status: '',
    note: ''
  }];
  const [showForm, setShowForm] = useState(false);
  const [newAppointment, setNewAppointment] = useState({ 
    time: "",
    doctor: "",
    email: "",
    fullName: "",
    status: "ƒêang ch·ªù",
    note: ""
 });
 // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [appointmentDataa, setAppointmentDataa] = useState(appointmentSeedData);
  const handleAddAppointment = () => {
    const updated = [...appointmentData, newAppointment];
    setAppointmentDataa(updated);
    setFilteredData(updated);
    setShowForm(false);
    setNewAppointment({ time: "", doctor: "", email: "", fullName: "", status: "", note: "" });
  };
  // h·∫øt th√™m l·ªãch h·∫πn

  return (
    <div className="w-full h-screen">
      {/* filter */}
      <fieldset className="border-1 p-4 rounded-[7px] mt-4 ml-[26px] mr-[26px] h-[130px]">
        <legend className="px-2 text-sm mt-1">Filter</legend>
        
        {/* t√™n, email, sdt, m√£ s·ªë ƒë∆°n thu·ªëc, ng√†y kh√°m */}
        <div className="flex">
          <div className="grid grid-cols-2 gap-y-3 gap-x-10">
            <div className="flex items-center">
              <label className="w-[100px] text-sm mb-2 mr-2">T√™n b·ªánh nh√¢n</label>
              <input type="text" placeholder="Nh·∫≠p email" className="bg-white"/>
            </div>
            <div className="flex items-center">
              <label className="w-[100px]  text-sm mb-2 mr-2">M√£ ƒë∆°n thu·ªëc</label>
              <input type="text" placeholder="Nh·∫≠p t√™n b·ªánh nh√¢n" className="bg-white"/>
            </div>
            <div className="flex items-center">
              <label className="w-[100px] text-sm mb-2 mr-2">Tr·∫°ng th√°i thanh to√°n</label>
              <select
                value={status}
                onChange={(e) => setStatus(e.target.value)} 
                className="border px-3 py-2 rounded text-sm bg-white w-[200px]"
              >
                <option value="">T·∫•t c·∫£</option>
                <option value="ƒêang ch·ªù">ƒêang ch·ªù</option>
                <option value="ƒê√£ kh√°m">ƒê√£ kh√°m</option>
                <option value="H·ªßy">H·ªßy</option>
              </select>
            </div>
            
          </div>
          <div className="ml-10">
            <div className="">
              <label className="w-[100px] text-sm mb-2 mr-2">Kho·∫£ng ng√†y t·∫°o</label>
              <input type="text" placeholder="Nh·∫≠p email b·ªánh nh√¢n" className="bg-white"/>
            </div>
            <div></div>
          </div>
        </div>
      </fieldset>
      {/* button */}
      <div className="ml-[26px] mt-[15px]">
        <button
          onClick={handleStatusChange} 
          className="bg-blue-500 w-[70px] h-[35px] text-[12px] cursor-pointer text-white rounded mr-2"
        >
          T√¨m ki·∫øm
        </button>
        <button
          onClick={() => {setShowForm(true)}}
          className="bg-red-300 w-[70px] h-[35px] text-[12px] cursor-pointer text-black rounded mr-2"
        >
          Th√™m
        </button>
        <button className="bg-gray-300 w-[70px] h-[35px] text-[12px] cursor-pointer text-black rounded mr-2">X√≥a</button>
        <button className="bg-gray-300 w-[70px] h-[35px] text-[12px] cursor-pointer text-black rounded mr-2">S·ª≠a</button>
      </div>
      {/* table */}
      <div className="mt-5 ml-[26px] mr-[26px] mb-3">
        <div className="bg-white rounded-lg shadow-sm overflow-y-auto mt-5">
          <p className="p-2 text-lg mb-3">üìä Danh s√°ch <span className="font-bold">H√≥a ƒë∆°n kh√°m b·ªánh</span></p>
          <div className="max-h-[500px] overflow-y-auto scrollbar-thin">
            <table className="w-full text-sm">
              <thead className="sticky top-0 bg-gray-100 text-left">
                <tr className="text-center">
                  <th className="p-3">M√£ h√≥a ƒë∆°n</th>
                  <th className="p-3">T√™n b·ªánh nh√¢n</th>
                  <th className="p-3">Ng√†y t·∫°o h√≥a ƒë∆°n</th>
                  <th className="p-3">Danh s√°ch d·ªãch v·ª• kh√°m</th>
                  <th className="p-3">T·ªïng ti·ªÅn thanh to√°n</th>
                  <th className="p-3">Tr·∫°ng th√°i</th>
                  <th className="p-3">H√¨nh th·ª©c thanh to√°n</th>
                </tr>
              </thead>
              <tbody>
                {filteredData.map((item, index) => (
                  <tr key={index} className="border-b hover:bg-gray-100 text-center">
                    <td className="p-3">{item.time}</td>
                    <td className="p-3">{item.doctor}</td>
                    <td className="p-3">{item.email}</td>
                    <td className="p-3">{item.fullName}</td>
                    <td className="p-3">
                      <span
                        className={`px-2 py-1 rounded-full text-white flex justify-center items-center text-xs font-semibold ${
                          item.status === 'ƒêang ch·ªù'
                            ? 'bg-yellow-400'
                            : item.status === 'H·ªßy'
                            ? 'bg-red-400'
                            : 'bg-green-400'
                        }`}
                      >
                        {item.status}
                      </span>
                    </td>
                    <td className="p-3">{item.note}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
      {/* h·∫øt table */}
      {/* modal */}
      {showForm && (
        <div className="fixed inset-0 backdrop-blur-sm bg-white/10 flex items-center justify-center z-50">
          <div className="space-y-3 bg-white p-6 rounded shadow-md w-[500px] max-w-full">
            <input 
              type="text" 
              placeholder="T√™n b·ªánh nh√¢n" 
              value={newAppointment.fullName}
              onChange={(e) => setNewAppointment({ ...newAppointment, fullName: e.target.value })}
              className="border px-3 py-2 rounded w-full" 
            />
            <input 
              type="text" 
              placeholder="Email"
              value={newAppointment.email}
              onChange={(e) => setNewAppointment({ ...newAppointment, email: e.target.value })} 
              className="border px-3 py-2 rounded w-full" 
            />
            <input 
              type="text" 
              placeholder="B√°c sƒ©" 
              value={newAppointment.doctor}
              onChange={(e) => setNewAppointment({ ...newAppointment, doctor: e.target.value })}
              className="border px-3 py-2 rounded w-full" 
            />
            <input 
              type="text" 
              placeholder="Gi·ªù kh√°m (vd: 14:00)" 
              value={newAppointment.time}
              onChange={(e) => setNewAppointment({ ...newAppointment, time: e.target.value })}
              className="border px-3 py-2 rounded w-full" 
            />
            <select 
              className="border px-3 py-2 rounded w-full"
              value={newAppointment.status}
              onChange={(e) => setNewAppointment({ ...newAppointment, status: e.target.value })}
            >
              <option value="ƒêang ch·ªù">ƒêang ch·ªù</option>
              <option value="ƒê√£ kh√°m">ƒê√£ kh√°m</option>
              <option value="H·ªßy">H·ªßy</option>
            </select>
            <input 
              type="text" 
              placeholder="Ghi ch√∫" 
              value={newAppointment.note}
              onChange={(e) => setNewAppointment({ ...newAppointment, note: e.target.value })}
              className="border px-3 py-2 rounded w-full" 
            />
            <button className="bg-blue-500 text-white px-4 py-2 rounded cursor-pointer" onClick={handleAddAppointment}>
              L∆∞u
            </button>
            <button className="bg-gray-300 text-black px-4 py-2 rounded cursor-pointer" onClick={() => setShowForm(false)}>
              H·ªßy
            </button>
          </div>
        </div>
      )}
      {/* h·∫øt modal */}
    </div>
  );
}
export default BillPage;